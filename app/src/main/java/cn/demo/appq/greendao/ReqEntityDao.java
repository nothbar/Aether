package cn.demo.appq.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.demo.appq.entity.ReqEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REQ_ENTITY".
*/
public class ReqEntityDao extends AbstractDao<ReqEntity, Long> {

    public static final String TABLENAME = "REQ_ENTITY";

    /**
     * Properties of entity ReqEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SessionId = new Property(1, String.class, "sessionId", false, "SESSION_ID");
        public final static Property AppName = new Property(2, String.class, "appName", false, "APP_NAME");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property Host = new Property(4, String.class, "host", false, "HOST");
        public final static Property Port = new Property(5, Integer.class, "port", false, "PORT");
        public final static Property Index = new Property(6, Integer.class, "index", false, "INDEX");
        public final static Property Ip = new Property(7, String.class, "ip", false, "IP");
        public final static Property Protocol = new Property(8, String.class, "protocol", false, "PROTOCOL");
        public final static Property HttpProtocol = new Property(9, String.class, "httpProtocol", false, "HTTP_PROTOCOL");
        public final static Property Method = new Property(10, String.class, "method", false, "METHOD");
        public final static Property Path = new Property(11, String.class, "path", false, "PATH");
        public final static Property IsHttps = new Property(12, Boolean.class, "isHttps", false, "IS_HTTPS");
        public final static Property Time = new Property(13, Long.class, "time", false, "TIME");
        public final static Property Uid = new Property(14, Integer.class, "uid", false, "UID");
        public final static Property Length = new Property(15, Integer.class, "length", false, "LENGTH");
        public final static Property StreamId = new Property(16, Integer.class, "streamId", false, "STREAM_ID");
        public final static Property RequestHeaders = new Property(17, String.class, "requestHeaders", false, "REQUEST_HEADERS");
        public final static Property ClientHttp2Settings = new Property(18, String.class, "clientHttp2Settings", false, "CLIENT_HTTP2_SETTINGS");
        public final static Property PeerHttp2Settings = new Property(19, String.class, "peerHttp2Settings", false, "PEER_HTTP2_SETTINGS");
        public final static Property ReqContent = new Property(20, String.class, "reqContent", false, "REQ_CONTENT");
        public final static Property RespContent = new Property(21, String.class, "respContent", false, "RESP_CONTENT");
        public final static Property RespMessage = new Property(22, String.class, "respMessage", false, "RESP_MESSAGE");
        public final static Property RespCode = new Property(23, Integer.class, "respCode", false, "RESP_CODE");
        public final static Property IsWebSocket = new Property(24, Boolean.class, "isWebSocket", false, "IS_WEB_SOCKET");
    }


    public ReqEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ReqEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REQ_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SESSION_ID\" TEXT," + // 1: sessionId
                "\"APP_NAME\" TEXT," + // 2: appName
                "\"URL\" TEXT," + // 3: url
                "\"HOST\" TEXT," + // 4: host
                "\"PORT\" INTEGER," + // 5: port
                "\"INDEX\" INTEGER," + // 6: index
                "\"IP\" TEXT," + // 7: ip
                "\"PROTOCOL\" TEXT," + // 8: protocol
                "\"HTTP_PROTOCOL\" TEXT," + // 9: httpProtocol
                "\"METHOD\" TEXT," + // 10: method
                "\"PATH\" TEXT," + // 11: path
                "\"IS_HTTPS\" INTEGER," + // 12: isHttps
                "\"TIME\" INTEGER," + // 13: time
                "\"UID\" INTEGER," + // 14: uid
                "\"LENGTH\" INTEGER," + // 15: length
                "\"STREAM_ID\" INTEGER," + // 16: streamId
                "\"REQUEST_HEADERS\" TEXT," + // 17: requestHeaders
                "\"CLIENT_HTTP2_SETTINGS\" TEXT," + // 18: clientHttp2Settings
                "\"PEER_HTTP2_SETTINGS\" TEXT," + // 19: peerHttp2Settings
                "\"REQ_CONTENT\" TEXT," + // 20: reqContent
                "\"RESP_CONTENT\" TEXT," + // 21: respContent
                "\"RESP_MESSAGE\" TEXT," + // 22: respMessage
                "\"RESP_CODE\" INTEGER," + // 23: respCode
                "\"IS_WEB_SOCKET\" INTEGER);"); // 24: isWebSocket
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REQ_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ReqEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(3, appName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String host = entity.getHost();
        if (host != null) {
            stmt.bindString(5, host);
        }
 
        Integer port = entity.getPort();
        if (port != null) {
            stmt.bindLong(6, port);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(7, index);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(8, ip);
        }
 
        String protocol = entity.getProtocol();
        if (protocol != null) {
            stmt.bindString(9, protocol);
        }
 
        String httpProtocol = entity.getHttpProtocol();
        if (httpProtocol != null) {
            stmt.bindString(10, httpProtocol);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(11, method);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(12, path);
        }
 
        Boolean isHttps = entity.getIsHttps();
        if (isHttps != null) {
            stmt.bindLong(13, isHttps ? 1L: 0L);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(14, time);
        }
 
        Integer uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(15, uid);
        }
 
        Integer length = entity.getLength();
        if (length != null) {
            stmt.bindLong(16, length);
        }
 
        Integer streamId = entity.getStreamId();
        if (streamId != null) {
            stmt.bindLong(17, streamId);
        }
 
        String requestHeaders = entity.getRequestHeaders();
        if (requestHeaders != null) {
            stmt.bindString(18, requestHeaders);
        }
 
        String clientHttp2Settings = entity.getClientHttp2Settings();
        if (clientHttp2Settings != null) {
            stmt.bindString(19, clientHttp2Settings);
        }
 
        String peerHttp2Settings = entity.getPeerHttp2Settings();
        if (peerHttp2Settings != null) {
            stmt.bindString(20, peerHttp2Settings);
        }
 
        String reqContent = entity.getReqContent();
        if (reqContent != null) {
            stmt.bindString(21, reqContent);
        }
 
        String respContent = entity.getRespContent();
        if (respContent != null) {
            stmt.bindString(22, respContent);
        }
 
        String respMessage = entity.getRespMessage();
        if (respMessage != null) {
            stmt.bindString(23, respMessage);
        }
 
        Integer respCode = entity.getRespCode();
        if (respCode != null) {
            stmt.bindLong(24, respCode);
        }
 
        Boolean isWebSocket = entity.getIsWebSocket();
        if (isWebSocket != null) {
            stmt.bindLong(25, isWebSocket ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ReqEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sessionId = entity.getSessionId();
        if (sessionId != null) {
            stmt.bindString(2, sessionId);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(3, appName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String host = entity.getHost();
        if (host != null) {
            stmt.bindString(5, host);
        }
 
        Integer port = entity.getPort();
        if (port != null) {
            stmt.bindLong(6, port);
        }
 
        Integer index = entity.getIndex();
        if (index != null) {
            stmt.bindLong(7, index);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(8, ip);
        }
 
        String protocol = entity.getProtocol();
        if (protocol != null) {
            stmt.bindString(9, protocol);
        }
 
        String httpProtocol = entity.getHttpProtocol();
        if (httpProtocol != null) {
            stmt.bindString(10, httpProtocol);
        }
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(11, method);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(12, path);
        }
 
        Boolean isHttps = entity.getIsHttps();
        if (isHttps != null) {
            stmt.bindLong(13, isHttps ? 1L: 0L);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(14, time);
        }
 
        Integer uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(15, uid);
        }
 
        Integer length = entity.getLength();
        if (length != null) {
            stmt.bindLong(16, length);
        }
 
        Integer streamId = entity.getStreamId();
        if (streamId != null) {
            stmt.bindLong(17, streamId);
        }
 
        String requestHeaders = entity.getRequestHeaders();
        if (requestHeaders != null) {
            stmt.bindString(18, requestHeaders);
        }
 
        String clientHttp2Settings = entity.getClientHttp2Settings();
        if (clientHttp2Settings != null) {
            stmt.bindString(19, clientHttp2Settings);
        }
 
        String peerHttp2Settings = entity.getPeerHttp2Settings();
        if (peerHttp2Settings != null) {
            stmt.bindString(20, peerHttp2Settings);
        }
 
        String reqContent = entity.getReqContent();
        if (reqContent != null) {
            stmt.bindString(21, reqContent);
        }
 
        String respContent = entity.getRespContent();
        if (respContent != null) {
            stmt.bindString(22, respContent);
        }
 
        String respMessage = entity.getRespMessage();
        if (respMessage != null) {
            stmt.bindString(23, respMessage);
        }
 
        Integer respCode = entity.getRespCode();
        if (respCode != null) {
            stmt.bindLong(24, respCode);
        }
 
        Boolean isWebSocket = entity.getIsWebSocket();
        if (isWebSocket != null) {
            stmt.bindLong(25, isWebSocket ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ReqEntity readEntity(Cursor cursor, int offset) {
        ReqEntity entity = new ReqEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sessionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // host
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // port
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // index
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ip
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // protocol
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // httpProtocol
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // method
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // path
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // isHttps
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // time
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // uid
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // length
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // streamId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // requestHeaders
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // clientHttp2Settings
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // peerHttp2Settings
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // reqContent
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // respContent
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // respMessage
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // respCode
            cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0 // isWebSocket
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ReqEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSessionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAppName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHost(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPort(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIndex(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIp(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProtocol(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHttpProtocol(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMethod(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPath(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setIsHttps(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setTime(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setUid(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setLength(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setStreamId(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setRequestHeaders(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setClientHttp2Settings(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPeerHttp2Settings(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setReqContent(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setRespContent(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setRespMessage(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setRespCode(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setIsWebSocket(cursor.isNull(offset + 24) ? null : cursor.getShort(offset + 24) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ReqEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ReqEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ReqEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
